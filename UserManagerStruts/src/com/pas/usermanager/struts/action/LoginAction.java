/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.pas.usermanager.struts.action;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.pas.usermanager.domain.User;
import com.pas.usermanager.service.UserService;
import com.pas.usermanager.struts.form.UserForm;

/**
 * MyEclipse Struts Creation date: 10-15-2013
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/login" name="userForm" scope="request"
 */
public class LoginAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		UserForm userForm = (UserForm) form;
		// 验证码
		String code = request.getParameter("code");
		String codeSer = request.getSession().getAttribute("code").toString();
		if ("".equals(code) || "".equals(codeSer)) {
			err(request, "请输入验证码");
			return mapping.findForward("loginerr");
		} else if (!code.equals(codeSer)) {
			err(request, "验证码不正确");
			return mapping.findForward("loginerr");
		}

		// 接受数据 用户名 密码
		User user = new User();
		String userid = String.valueOf(userForm.getId());
		String password = userForm.getPwd();

		if ("".equals(userid) || "".equals(password) || null == userid
				|| null == password) {
			err(request, "请输入信息");
			return mapping.findForward("loginerr");

		} else {
			user.setId(Integer.parseInt(userid.equals("") ? "-1" : userid));
			user.setPwd(password);

			// 先简单验证
			if (new UserService().checkUser(user)) {
				// 跳转下个页面【Servlet 有两种方式 sendredirect转向 forward转发】
				user = new UserService().getUserModel(userid);
				request.getSession().setAttribute("User", user);

				// 访问人数计数加1
				int num = Integer.parseInt(this.getServlet()
						.getServletContext().getAttribute("num").toString());
				this.getServlet().getServletContext()
						.setAttribute("num", num + 1);
				// 查看是否保存cookie
				setPassKeepCookie(request, response, userid, password);
				// 取出是否首次登陆
				request.getSession().setAttribute("firstInfo",
						firstLogin(request, response));
				// 放刷新
				response.sendRedirect("/UserManagerStruts/route.do?path=main");
				return null;
			} else {
				err(request, "用户名或密码错误！");
				return mapping.findForward("loginerr");
			}
		}

	}

	private void setPassKeepCookie(HttpServletRequest request,
			HttpServletResponse response, String userid, String password) {
		String[] likes = request.getParameterValues("keeppass");
		if (null != likes) {
			Cookie ckid = new Cookie("keepid", userid);
			Cookie ckpass = new Cookie("keeppass", password);
			ckid.setMaxAge(3600 * 24 * 7);
			ckpass.setMaxAge(3600 * 24 * 7);
			response.addCookie(ckid);
			response.addCookie(ckpass);
		} else {
			for (Cookie cookie : request.getCookies()) {
				if (cookie.getName().startsWith("keep")) {
					cookie.setMaxAge(0);
					response.addCookie(cookie);
				}
			}
		}
	}

	private void err(HttpServletRequest request, String err){
		request.setAttribute("err", err);
		return;
	}

	/*
	 * 判断是否首次登陆 取出上次登录时间
	 */
	public String firstLogin(HttpServletRequest request,
			HttpServletResponse response) {
		Cookie[] cks = request.getCookies();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String nowTime = sdf.format(new Date());
		if (cks != null) {
			for (Cookie c : cks) {
				if (c.getName().equals("ck_date")) {
					String date = "您上次登录时间：" + c.getValue();
					c.setValue(nowTime);
					response.addCookie(c);
					return date;
				}
			}
		}

		Cookie ck_date = new Cookie("ck_date", nowTime);
		ck_date.setMaxAge(3600 * 7 * 24);
		response.addCookie(ck_date);
		return "您是首次登录";
	}
}